*briofita.txt*	Companion help to Briofita, a customizable dark colorscheme

+--------------+-------------------------------------------------------------+
|   *briofita*   | `Briofita`: a complex, (somewhat-)dark background  Vim  GUI   |
|              | colorscheme with selectable user options designed for easy  |
|              | "rotation" or "cycling" of optins by Vim plugins.           |
|              +-------------------------------------------------------------+
|              | `briofita-support`: A companion  Vim plugin  it  shows how  a |
|              | plugin can interact with the colorscheme.   Its extensively |
|              | tested functionalities, operations  and  menus  make it  a  |
|              | handy tool to set the colorscheme parameters.               |
|              +-------------------------------------------------------------+
|              | `Helpfile`  This file. This is a Vim helpfile companion to    |
|              | the Briofita colorscheme. It tells about its operation      |
|              | and has details about how to set its parameters in order    |
|              | to customize it.                                            |
|              +-------------------------------------------------------------+
|              | `Version`   v3.0.3  (view the release notes at the end)       |
|              | Author:   Sergio Nobre (sergio.o.nobre at gmail dot com)    |
|              | Licence:  The VIM LICENCE applies to Briofita               |
|              |           (read it in the Vim help:   ":help license").     |
+--------------+-------------------------------------------------------------+


==============================================================================
TABLE OF CONTENTS                      {{{1                       *briofita-TOC*
==============================================================================

 1. About Briofita .............................. |briofita-about|
 2. Installation ................................ |briofita-installation|
 3. Colorscheme customization ................... |briofita-customization|
 4. Options list ................................ |briofita-options-list|
 5. Tabpage local settings ...................... |briofita-local-settings|
 6. Plugin ...................................... |briofita-plugin|
    6.1.  Menus ................................. |briofita-menus|
    6.2.  Global functions ...................... |briofita-functions|
    6.3.  Commands and maps ..................... |briofita-cmds-maps|
 7. Performance ................................. |briofita-performance|
 8. Syntax coverage ............................. |briofita-coverage|
 9. Useful Vim Help entries for newbies ......... |briofita-vimhelp|
10. Issues ...................................... |briofita-known-issues|
11. History ..................................... |briofita-history|
12. TODO ........................................ |briofita-todo|
13. Experimental Distractionless Editing ........ |briofita-distractionless|


==============================================================================
1
ABOUT BRIOFITA                         {{{1                     *briofita-about*


`Briofita` is basically composed of
		(1) a complex GUI colorscheme,
		(2) a plugin that makes it easy for the user to drive the colorscheme
			parameters ("briofita-support.vim"), and
		(3) this Vim help file ("briofita.txt").

It can be downloaded from its Vim online page:
        http://www.vim.org/scripts/script.php?script_id=4136.

The colorscheme normal background has a shaded dark-green color by default.
It uses high contrast in a few syntax items. It gives higher priority to
user's visual comfort within each filetype editing session, consequently, it
does not try to enforce equal display of different filetypes' items that
happen to have similar names (although many of such syntax items get similar
highlights).

The colorscheme was designed to fit study, research and work needs. (It is not
recommended to color blinded people: it has elements highlighted in `red` ...)

Due to the unusually high number of syntax highlights it implements and to
its customization options, this is not a minimalist colorscheme, and, at the
time of this release it is not recommended for use in systems which are low in
memory or have older CPUs (this limitation is likely going to be short-lived,
given the current pace of hardware changes...).

The colorscheme can be used without any customization; there are proper
defaults for the typical user.

The colorscheme does not depend on the companion plugin (which is recommended
because it is a handy GUI tool for setting the colorscheme options and for
easily changing them). The plugin does not have to be installed for the
colorscheme to function; on the other hand, most of the plugin's functionality
requires that the colorscheme be installed and active.

Originally this colorscheme was just a tweaked version of `Moss` (vimscript
#2779), with few changes for personal preferences; inspired by some favorite
colorschemes, other features were added along the time; then it was
restructured to use a color dictionary similar to the one used by the
`Distinguished` colorscheme (vimscript #3529).

                                                                  |briofita-TOC|

==============================================================================
2
INSTALLATION                           {{{1              *briofita-installation*


Briofita is released as a packed file (zip).

Just unpack it and move the files from the "colors", "doc" and "plugin"
directories into the respective directories of your ".vim" directory.

If you want the colorscheme but not the plugin: do not copy the plugin into
the "plugin" directory. The colorscheme does not depend on the plugin.

In case you use Pathogen (ou similar bundle-based plugins) create a
".vim/bundle/briofita" directory and move the directory tree of the
unpacked file into it. (If you do not want the plugin, just delete the "plugin"
directory from the unzipped directory tree.)

Proceed by doing ":helptags"  (for Pathogen users, ":Helptags").

Read the hints about using Briofita in the help file:
>
			:help briofita
<
Edit your ".gvimrc" file to add the parameters you like.

Test it:

Open another instance of GUI Vim and execute the following
command:
>
			:color briofita
<
If you have installed the TabPageColorScheme plugin the above command can be
replaced by this one which makes the colorscheme active for the current
tabpage:
>
 			:Tcolorscheme briofita
<
To have Briofita started at Vim start-up just put one of the above commands
in your ".gvimrc".

These commands may be manually executed via briofita-support plugin menu, if
you have installed the plugin. Just navigate through the menu until you find
those entries that show the above commands. Clicking one of them you reload
Briofita by the corresponding method.

Uninstallation: to uninstall Briofita, just delete the above sources from the
"colors", "doc" and "plugin" directories.

------------------------------------------------------------------------------
Recommended Tabpagecolorscheme plugin~

The author uses and recommends the Vim plugin "tabpagecolorscheme".
It makes your tabpages "remember" their colorscheme.  Get it from the Vim site:

http://www.vim.org/scripts/script.php?script_id=3358.

This plugin allows a different colorscheme to be active in each tabpage.
The Briofita companion plugin, briofita-support, has an example of calling a
command of this plugin. (Briofita can be normally used without it.)

When using the plugin you re-source the colorscheme by clicking on another
tabpage and then back to the original tab.

NOTE: There might be other Vim plugins that perform like this one, you may
search and try their use with Briofita... but until now Briofita has been
tested only with this plugin.

                                                                  |briofita-TOC|


==============================================================================
3
COLORSCHEME CUSTOMIZATION              {{{1             *briofita-customization*


Briofita comes with default settings for common user's needs.

But global variable options are provided and may be used to customize the way
the syntax items are displayed. These options provide alternative displays for
selected syntax items.

The options (which we also call "parameters") are specified via integers,
being zero the default. These numeric parameters were designed to enable user
functions or plugins to easily change them by "option rotation" (which we also
call "cycling") but can be manually set via command-line.

For practical reasons, in some cases more than one Vim highlight gets
associated to one Briofita option, so that cycling the values of this one
effects a change in that group of Vim highlights. Each time you change the
numeric value of a grouped option you get a different visual effect on each
highlight item in the group. We call such grouped items "linked highlights",
"coupled highlights" or "connected highlights".


Allowed Parameters~

Briofita "parameters" (options) are keys in the >
                        g:briofita_parms
<
Vim dictionary. The user can set any key provided it belongs to a
colorscheme-managed global list, >
                        g:briofita_allowed_parms
<
which is a list of keys the user is allowed to set.
View the list by issuing this command >
                        :echo g:briofita_allowed_parms.
<
Each key is an all-lowercase string, and each key holds a numerical value.
Zero is the default highlight setting for each option. There are boolean-like
options: they hold number 0 or number 1 as value and are regarded as an
"attribute" that is present or absent. An example is 'statusline' key: if its
value is zero the colorscheme will not set statusline related highlihgts.

Command-line example 1:
>
	" setting Search Briofita option in an existing dictionary
    let g:briofita_parms['search'] = 3

Command-line example 2:
>
	" creating a dictionary, and setting two Briofita options
    let g:briofita_parms = { 'search': 3, 'localcursorline':0 }
<

Briofita and Vim options~

Most of the Briofita options are connected to Vim options. If you usually do
NOT use some Vim option, you do not need to use the corresponding Briofita
option.

CursorLine option cycling~

If you use the briofita-support plugin it is easy to change ("cycle") the
CursorLine option, you just need to click on the corresponding menu entry.

If you do not use the companion plugin it is recommended that you create
tool bar buttons for cycling CursorLine, so that each time you click on
them a new option is in effect.

Command-line setting of options~

Issue the command below in Vim command line. It should change your Search
highlight background:

>
    :let g:briofita_parms['search'] = 2
<
Notice that the effect of this command may not be immediate because the
colorscheme is not aware of command line events. You may need to source it
with the command
>
        :colorscheme briofita.
<

Practical way of setting Briofita options~

The user may experiment different options settings (either via command-line
or via plugin) until the favorite ones are found.

Once found, the user may edit the .gvimrc (or .vimrc) file to add the
respective commands into it. That is the ideal location for the user's
favorite settings.

Options cycling~

Cycling begins with key value zero, the default for all options.

The colorscheme may alter the value of a dictionary key if it is incorrect, or
if its value is above the limit for the key: then it returns to the initial
value, the default.
                                                                  |briofita-TOC|


==============================================================================
4
OPTIONS LIST                           {{{1              *briofita-options-list*


All the below Briofita options ("parameters") can be set by the user via
command-line. Some of them may be set by clicking selected briofita-support
GUI menu entries (mainly those with "CYCLE" in the menu entry text).

Many options are meaningful only if you use the corresponding Vim option.
For example if you do not use Vim option "hlsearch" it does not make sense to
set the Briofita option Search ('search' key).


------------------------------------------------------------------------------
Conceal~

key:              'conceal'
max:              4
Dictionary:       g:briofita_parms['conceal']
Highlight items:  Conceal, VertSplit

------------------------------------------------------------------------------
ColorColumn~

key:             'colorcolumn'
max:             4
Dictionary:      g:briofita_parms['colorcolumn']
Highlight items: ColorColumn, NonText
Command-line example: >
                :let g:briofita_parms['colorcolumn'] = 2
Explore the plugin menu for useful entries connected with this option.
For testing, set Vim option textwidth to a low number so that you do not have
to scroll to the right of the screen to see the cycling effects.

------------------------------------------------------------------------------
CursorLine~

key:         'cursorline'
max:         9
Dictionary:  g:briofita_parms['cursorline']
Variable:    t:briofita_choice_for_cursorline
highlights:  CursorLine,  CursorColumn (ColorColumn if 'colorcolumn' value=1)

Command-line example:
>
    let g:briofita_parms['cursorline'] = 1
<
Linked Option:
	Briofita CursorLine and CursorColumn options are coupled. Changing the
	CursorLine option also affects the CursorColumn highlight: but you will
	see it on your text only if you have enabled the corresponding Vim
	cursorcolumn option. (There is NO corresponding key name "cursorcolumn".)

Applying CursorLine to all tabpages:
	If you want the SAME CursorLine style in all your tab pages, use the
	dictionary as follows and do not set or change the above mentioned "t:"
	variable:
>
			let g:briofita_parms['localcursorline'] = 0
			let g:briofita_parms['cursorline'] = 2
<
Applying CursorLine to the current tabpage:
	If you want DIFFERENT background colors of CursorLine for each tabpage,
	then issue the two commands in the below example FOR THE TAB PAGE WHERE
	YOU ARE:
>
			let g:briofita_parms['localcursorline'] = 1
			set t:briofita_choice_for_cursorline=3
<
	The example assumes your favorite CursorLine option for the current tab
	is the option with number 3.
	Repeat the SECOND command above for each tabpage where you want a different
	CursorLine background color (change the "3" to a different number in each
	tabpage).

Connected flag:
	Read the topic for the related 'localcursorline' key to know how it may
	affect the behavior of the 'cursorline' key.

------------------------------------------------------------------------------
CursorLineNr~

key:             'cursorlinenr'
max:             3
Highlight items: CursorLineNr, LineNr, VimNumber
Dictionary key:  g:briofita_parms['cursorlinenr']

Command-line example:
>
    let g:briofita_parms['cursorlinenr'] = 2
<
------------------------------------------------------------------------------
Folded~

key:             'folded'
max:             4
Highlight items: Folded
Dictionary:      g:briofita_parms['folded']

Command-line setting:
>
    let g:briofita_parms['folded'] = 2
<
This Briofita option is related to the way Vim displays folded items.

------------------------------------------------------------------------------
LocalCursorLine~

key: 'localcursorline'
max: 1 (boolean)
Dictionary:   g:briofita_parms['localcursorline']
Command-line setting:
>
    let g:briofita_parms['localcursorline'] = 1
<
This 'localcursorline' option is the only required entry in the dictionary.
You need to specify it when manually creating a new dictionary. If you use the
companion plugin this is one of the dictionary keys which are automatically
created when you click on selected menu entries.

This option affects the CursorLine Briofita option. It is a flag which may
have 0 or 1 values. When its value is 0, the 'cursorline' parameter applies
to all tabpages. Otherwise, the 'cursorline' parameter applies to the current
tabpage (ie may be different in each one).

(This Briofita option does not directly affect any highlight and does not have
any corresponding Vim option.)

------------------------------------------------------------------------------
Normal~

key:             'normal'
max:             8
Highlight items: Normal
Dictionary:      g:briofita_parms['normal']

Command-line setting:
>
    let g:briofita_parms['normal'] = 2
<
The Normal highlight is applied to the common text, the text that has no
special syntax.

------------------------------------------------------------------------------
Search~

key:             'search'
max:             11
Highlight items: Search
Dictionary:      g:briofita_parms['search']

Command-line setting:
>
    let g:briofita_parms['search'] = 1
<
This Briofita option allows you to change the visual style of the star (`*`) and
search (`/`) commands in Vim normal mode. (You should set the Vim boolean
option hlsearch to see the effect of this Briofita option.)

------------------------------------------------------------------------------
Diff~

key:             'diff'
max:             7
Highlight items: diffAdd,diffAdded,diffChange,diffChanged,diffDelete,
                 diffRemoved,diffSubname,DiffText
Dictionary:      g:briofita_parms['diff']

Useful when comparing files in Vim or opening diff files. Cycle, experimenting
with the different alternatives, then define one as your favorite.

------------------------------------------------------------------------------
FoldColumn~

key:             'foldcolumn'
max:             5
Highlight items: FoldColumn highlight
Dictionary:      g:briofita_parms['foldcolumn']

------------------------------------------------------------------------------
MatchParen~

key:             'matchparen'
max:             5
Highlight items: MatchParen, ModeMsg, MoreMsg
Dictionary:      g:briofita_parms['matchparen']

------------------------------------------------------------------------------
Mix01~

key:             'mix01'
max:             4
Highlight items: VimString,VimMapRHS,VimIsCommand,
                 VimEchoHLNone,VimFilter,VimFuncBody,JavaString
Dictionary:      g:briofita_parms['mix01']

------------------------------------------------------------------------------
Special~

key:             'special'
max:             3
Highlight items: Special
Dictionary:      g:briofita_parms['special']

                                                                  |briofita-TOC|

==============================================================================
5
TABPAGE_LOCAL_SETTINGS                 {{{1            *briofita-local-settings*

Local Settings~

Briofita CursorLine may have a feature which we here call "local" settings
(also "tabpage local" settings). Being "local", the CursorLine highlight may
show different color backgrounds for each different tabpage. And this behavior
extends to CursorColumn and other linked/coupled syntax items.

Note that, when not "local", they are "global": meaning that these items are
displayed equally on all tabpages.

Main Locality Condition~

Do this once for all tabpages:
>
	set the parameter 'localcursorline' to 1 in the global
	("g:") dictionary
<
Complementary Locality Condition~

Do this, creating one different instance per tabpage:
>
	set t:briofita_choice_for_cursorline with a CursorLine applicable value
<
If you delete the tabpage variable while the key 'localcursorline' keeps its
value 1:
>
	next time the colorscheme is sourced the tabpage variable will
    be re-created with default value (as 0).
<
The same happens if you set that key to 1 and do not create the tabpage
variable. Even if you delete all the tabpage variables, they will be recreated
with default value on reentry to the tabpage.

Except if you reset 'localcursorline' key (to value 0).

Creating, Setting or Deleting the Tabpage Variable~

You may manually create (or change the value of) the tabpage variable with
the Vim ":let" command. Or you may put the above commands in .vimrc/.gvimrc.

You may delete the tabpage variable with the Vim ":unlet" command.

(There are related "local" menu entries in the briofita-support plugin, which
you may try. Limitation: that part of the plugin was designed with testing in
mind, further development is necessary to fulfill normal user needs.)

Recommended Entry~

Although not required, if you will use the "local cursorline" feature, it is
recommended that you set the 'cursorline' parameter in the global dictionary.

Priority of Cursorline Options~

If 'localcursorline' is set (its value is 1), this is the established
priority among the possible Briofita 'cursorline' option sources:

>
	first:  variable  t:briofita_choice_for_cursorline
	second: dictionary key g:briofita_parms.cursorline
	third:  default setting for cursorline (zero)
<
In the absence of the first, which is the one with the highest priority, the second is
taken. In the absence of the second, the third is used.

Between two existing options, the one having the highest priority is used.

For example:
>
	If you have set both the tabpage variable and the dictionary key,
	the tabpage variable will prevail.

	If you omit both the tabpage variable and the dictionary key,
	the default will be used.
<

A logical consequence of these priorities: 
>
    When you manually change the GLOBAL dictionary 'cursorline' key 
    and do not perceive any change in display color, verify which setting
    you have in the dictionary for 'localcursorline'. If it is on (if its
    value is 1) the effects will only be visible upon changes of the LOCAL
    tabpage variable. (Or else reset the 'localcursorline' key.)
<

NOTE: the colorscheme may create that tabpage variable if 'localcursorline'
is set and the variable is not defined (its value will be taken either
from the 'cursorline' dictionary key or from the default).



                                                                  |briofita-TOC|

==============================================================================
6
BRIOFITA_SUPPORT_PLUGIN                           {{{1         *briofita-plugin*

The companion plugin, "briofita-support.vim", shows Briofita usage examples
and implements procedures that make it a handy tool for day-to-day use.
Notice that the colorscheme can be used independently of the plugin, but the
plugin will not provide most of its functionality without the colorscheme.



------------------------------------------------------------------------------
6.1
BRIOFITA_SUPPORT_MENUS                           {{{1           *briofita-menus*

Do
>
	    :call g:BriofitaMenu()
<
or put the above command in your ".gvimrc" to insert the plugin menu under
your main "Plugin" menu. Then navigate to the Plugin menu, click on
the Briofita support sub-menu and explore its sub-menu tree.

The clickable menu entries at the top of the main menu allow you to navigate
to the Help (displaying this help file), the About page, the Basic Actions
sub-menu which has a helpful newbies sub-menu crafted to help new Vim users to
set Briofita-related Vim options, and the Version information sub-menu.

This variable affects the positioning of the menu that is built by the plugin: >
          g:briofita_root_menu.
<
If the above variable does not exist, the plugin inserts the menu into an
assumed main "Plugin" menu.

                                                                  |briofita-TOC|

------------------------------------------------------------------------------
6.2
BRIOFITA_SUPPORT_FUNCTIONS                       {{{1       *briofita-functions*


A list of the plugin global functions follows.

g:BriofitaCycleCC()~

A function for cycling Briofita option ColorColumn (dict key: "colorcolumn").

g:BriofitaCycleCL(...)~

Cycling for the Briofita CursorLine parameter (and linked items).

g:BriofitaCycleCLN()~

A function for cycling Briofita option CursorLineNr (dict key: "cursorlinenr").

g:BriofitaCycleConceal()~

A function for cycling Briofita option Conceal (dict key: "conceal").

g:BriofitaCycleCUL(...)~

Example of an alternative implementation for cycling for the Briofita
CursorLine parameter (and linked items).

g:BriofitaCycleDiff()~

A function for cycling Briofita option "diff".

g:BriofitaCycleFolded()~

A function for cycling Briofita option Folded (dict key: "folded").

g:BriofitaCycleFoldColumn()~

A function for cycling Briofita option FoldColumn (dict key: "foldcolumn").

g:BriofitaCycleMix01()~

A function for cycling Briofita option "mix01".

g:BriofitaCycleMP()~

A function for cycling Briofita option MatchParen (dict key: "matchparen").

g:BriofitaCycleNormal()~

A function for cycling Briofita option Normal (dict key: "normal").

g:BriofitaCycleOneKey(dictkey)~

A function for cycling (increasing the value of) one global dictionary key,
a Briofita option/parameter.

g:BriofitaCycleSearch()~

A function for cycling Briofita option Search (dict key: "search").

g:BriofitaLocalCL(...)~

Makes Briofita CursorLine option (and items linked to it) behave locally.

g:BriofitaHighlightsCommander(be_local,cycle_start_point)~

This is an example function that sets a selection of user parameters.

g:BriofitaMenu()~

Builds the briofita-support plugin main menu. The menu has entries for
showing current options, for cycling, etc. By default it is inserted
under a root menu named "Plugin". The user can provide an alternative
root menu in the global variable "g:briofita_root_menu".

g:BriofitaSetOneKey(dictkey,newvalue)~

Example of a function to set a key in the global parameter dictionary.

g:BriofitaSupportMenuString()~

Returns the briofita-support plugin main menu string. It can be called
for menu activation.

g:BriofitaSupportMenuMap(trigger)~

Example of a function that is similar to g:BriofitaSupportMenuString().
But instead of returning the menu string it will execute the mapping
command directly. Its trigger parameter is the shortcut for the map.
(Check its source code and modify it to your needs.)

g:BriofitaToggleStatusline()~

Sets/resets the Briofita "boolean" option 'statusline'.

g:BriofitaVersion()~

Returns a string with version information, and current Briofita options
The below command is an example of how to display it above the command line:
>
		  :echo g:BriofitaVersion().
<
                                                                  |briofita-TOC|


------------------------------------------------------------------------------
6.3
BRIOFITA_COMMANDS_AND_MAPS                      {{{1        *briofita-cmds-maps*

This release of the Briofita plugin does not provide commands and maps.
You can easily create them, calling the available global functions.

An EXAMPLE of map creation follows:
>
	     nmap <C-B>     :execute 'popup ' . g:BriofitaSupportMenuString()<cr>
<
The example maps the shortcut keys Control-B to display the plugin menu.
You could put the above mapping command in your .vimrc.

Check the help section "Useful Vim Help entries for newbies" |briofita-vimhelp|
for Vim help entries that tell you how to create maps and commands.

                                                                  |briofita-TOC|


==============================================================================
7
PERFORMANCE                            {{{1               *briofita-performance*

General Performance~

This colorscheme has a LOT of syntax groups. I suppose that some users,
depending on their hardware, might detect some slowness while using it.
If this happens to you, let me know. (I have been using it for about two years
with no problem.)

Local CursorLine Performance~

CursorLine has an option, in Briofita, to allow local behavior, ie different
CursorLine backgrounds for each tabpage. This operates seamlessly because
the colorscheme only checks the tabpage variable setting (the t: variable) for
the current tabpage. If the colorscheme had to search all open tabpages it
would lack performance.

If you have written a plugin that sets local CursorLine Briofita option,
your plugin may perform a ":tabdo" and reload the colorscheme for each tabpage,
if necessary.

Briofita's companion plugin, briofita-support, has separate menu entries for
the operations which use ":tabdo".

You may manually activate local settings either by using this plugin's menu or
by calling its global functions. (And via command-line commands, obviously.)

Missing Numerical Options~

NOTE: this applies only if you change the colorscheme source, adding new
options:
If your added option SKIPS a numerical key in the dictionary, and
your user sets an option to a numerical value that is below the maximum
value for the option but matches the absent number, the colorscheme
tries to assign the NEXT entry in the dictionary. This may affect
performance. So, if you change the source, try to keep your dictionary
keys as a sequence of numbers.

                                                                  |briofita-TOC|

==============================================================================
8
SYNTAX COVERAGE                      {{{1                   *briofita-coverage*

Languages and applications covered by the colorscheme:

Syntaxes with 30 or more highlights each~
>
	Asciidoc, C and C++, Java, Javascript, Markdown,
	Perl, Python, Ruby, Shellscript, Vimscript
<
Syntaxes with 10 to 29 highlights each~
>
	Awk, CSS, HTML/XHTML and XML, Ocaml,
	PL/SQL and SQL, Sed, Tex, Vim Help
<
Here is another list, this one grouping the applications per usage:

Programming languages~
>
    - Java, C/C++
    - Javascript
    - Perl, Python, Ruby
    - Unix Shell scripts
    - SQL, PL/SQL
    - Vimscript language
<
Lightweight markup tools~
>
	- Asciidoc, Fountain, Markdown
<
Web page editing~
>
	- HTML / XHTML
	- XML
	- CSS
<
Customized highlights for Vim plugins~
>
	BufferSaurus / BufferGator, IndentGuides, log4j, ListMaps, ManpageView,
	NERDTree, Netrw,  TabMan, TagList and some snippets plugins
<

                                                                  |briofita-TOC|

------------------------------------------------------------------------------
9                                        {{{1                 *briofita-vimhelp*
USEFUL VIM HELP ENTRIES~

Of interest to newbies, below are listed some basic Vim help commands the user
may issue to get information about Vim options that are related to Briofita
options and commands used in connection with the colorscheme customization.

Creating menus or toobar buttons:
             :help creating-menus                            |creating-menus|
             :help gui-toolbar                               |gui-toolbar|

Creating maps or commands:
			 :help map-overview                              |map-overview|
             :help 40.2                                      |40.2|

Basic concepts, commands and options:
             :help 'cursorline                               |'cursorline|
             :help 'cursorcolumn                             |'cursorcolumn|
             :help 'conceallevel                             |'conceallevel|
             :help 'colorcolumn                              |'colorcolumn|
             :help 'number                                   |'number|
	         :help 'hlsearch                                 |'hlsearch|
	         :help :nohlsearch                               |:nohlsearch|
             :help usr_27                                    |usr_27|

==============================================================================
10
ISSUES                                 {{{1              *briofita-known-issues*

Vim Help File Editing~

Suppose you are editing a Vim help file of yours. You momentarily has set it
as modifiable (and non-readonly) and you are in Insert Mode. Your file has a
modeline that specifies 'ft=help'. Then you do ':tab help some-help-file' to
view other help in another tabpage. You might notice that the text of the
second help will be shown as if it were being edited too when you enter the
insert mode (in insert mode, syntax elements HelpBar or HelpStar will be shown
in HIGH CONTRAST). This is not an expected behavior since your intention was
to edit only the first file.

The root cause of this issue is not in the colorscheme itself. It just colors
those elements in high contrast on purpose instead of linking them to 'Ignore'
so that it makes it easier to edit Vim help hypertexts.

Since in that case HelpBar and HelpStar are not hidden as on usual help display,
this causes apparent mis-alignment of the lines in which these elements
appear. No problem: you can safely ignore this, because it only happens when
you EDIT a help file, and your end user, normally, is not supposed to edit
your help files; these files are usually viewed in a non-modifiable state.

                                                                  |briofita-TOC|


==============================================================================
11
HISTORY                                {{{1                   *briofita-history*


Below are the release notes of Briofita.

------------------------------------------------------------------------------
Note: As a general rule only the most recent releases of Briofita will be
      kept in the Vim web site.
------------------------------------------------------------------------------

v3.0.3 (August, 2013)~
	- Added one more option to the Folded and Normal highlights.
      The new Normal option has a black background (it provides
      more contrast for use under intense lighting conditions).
    - Improved one of the Asciidoc highlights.
	- Bug fix: boolean options (like statusline) were not previously being
	  cycled.

v3.0.2 (July, 2013)~
	- Improved one highlight in the colorscheme (for HTML).
	- Improved the plugin function that displays the main menu.
	- Bug fix in the plugin function that performs cursorline cycling.

v3.0.1 (July, 2013)~
	- Deleted a few debug commands/comments that had remained in the plugin.
	- Increased the release number/date.

v3.0.0 (July, 2013)~
	- Extensive code refactoring and testing (colorscheme plus companion
	  plugin). This version breaks compatibility with previous version.
	- Some highlights improved, some added. New customization options.
	- The helpfile refers to Vim help instructions on how to create commands
	  or maps, since the plugin is still menu-based. More entries were added
	  to the plugin's GUI menu, including a few basic ones for newbies.
	- Bug fixes.

v2.0.3 (May, 2013)~
	- Reduced contrasting background in a few highlights of these syntaxes:
	  Sql,PL/SQL,Fountain,Vim Language.
	- Increased contrasting background of the IncSearch highlight.
	- Corrections and improvements in the help text.

v2.0.2 (May, 2013)~
    - Changed the default for Search highlight. Cleaned plugin and help files.

v2.0.1 (May, 2013)~
    - Code cleaning. Bug fix: corrected some leftovers from previous development.

v2.0.0 (May, 2013)~
    - Increased major number due to the change in global parameter names. They
	  are not compatible with the previous version.
	- If you have upgraded from a previous version of the colorscheme,
	  please REVIEW your parameters.
	- Added a help file in the the "doc" sub-directory. Most of the text
	  previously in the Vim online page has been moved into the help file.
	- Added a "plugin" file as an example of use of the colorscheme by a
	  script. Please keep in mind that this "plugin" is just an example (at
	  least in this release).
	- Improved highlights for the syntaxes I more frequently use.
	- Previously there were just one huge internal highlights dictionary,
	  this has now been split into small dictionaries for easier change.
	- Suavization of style (less red, less high contrast).
	- Bug fixes and functions improvements.
	- Added option for alternative folding highlights.
    - Most user options are now implemented via global dictionary, keys being
	  lowercase names. The tabpage local option for for cursorline" still
	  uses the same "t:" variable as before.
	- Added an "statusline" option, which may have 0 or 1 values.
	  Highlights for StatusLine will be effective only if the value of this
	  option is 1. Use the value 0 if you want not to affect the highlight set
	  by your preferred Status Line plugin.

v1.5.0 (August, 2012)~
	- Improved color highlights of a few elements.
	- Added an informative function, g:BriofitaVersion. A string with the
	  colorscheme version number is shown if you issue a command like this:
	  ":echo g:BriofitaVersion()". If Briofita is the current color, some
	  parameter information is shown, too.
	- Added a parameter variable for distractionless editing mode.
	- ColorColumn option now accepts 3, meaning 'do not set usual ColorColumn
	  highlight' for that mode.
	- All options defaults are now zero.
	- Parameter variables are reset to default value if outside the proper
	  range.

v1.1 to v.1.4 (July, 2012)~
	- Bug fix on option for CursorLineNr.
	- Improved defaults logic.
	- Improved option *choice_for_colorcolumn.
	- Bug fix on option *choice_for_cursorline.

v1.0~
    FIRST RELEASE NOTES (July, 2012)~
    - Designed only for Vim GUI (gvim); terminals are not supported.
    - Intended for use in Vim versions from v7.3 on.
    - Tested with gVim 7.3 under Precise Pangolin Ubuntu Linux.
    - Background in a shaded dark green color.
    - It displays most of the text in nuances of green, blue, purple or violet,
      although the style is not uniform among different syntaxes.
    - For better contrast it uses red or reverse highlight in a few syntactic
      items of each filetype; in Python indentation errors, for example.
    - It sets a red ICursor via Vim 'guicursor' option.
    - A few highlights can be changed by the user via global options.

                                                                  |briofita-TOC|


==============================================================================
12
TODO                                   {{{1                      *briofita-todo*

	- Enable an easy "adaptation" of the colorscheme to lighting conditions,
	  via some parameter or option. This need was perceived recently, when I
	  had to attend a course in a sunlit room; crowded as it was, I could not
	  move from my desk near the window, so I had to use some other, brighter
	  colorscheme.

                                                                  |briofita-TOC|

==============================================================================
13
DISTRACTIONLESS_MODE                        {{{1      *briofita-distractionless*

Briofita has a distraction-less editing feature. >
	This topic is located at the end of the helpfile because it is an
	experimental feature, very basic, not for heavy users: if you are one,
	check any of the Vim plugins focused on this feature (for example, search
	"dark room" or "distraction" on the Vim Online site).
<
In this mode some visual elements have low visibility or are almost hidden.
For this mode only, Briofita sets User1-User9 highlights so that the
statusline becomes almost hidden. And for an effective use you will most
likely need additional settings like resetting Vim option "number", for example.

Variable t:briofita_nodistractionmode~
This is the commanding variable for this mode. There are only TWO possible
values for this variable. Zero makes the highlights used for this mode to have
the typical Briofita background style. One makes the background be black.

Entering no-distraction mode on a tab~
Follow this procedure:
>
   - create the above mentioned tabpage-local variable: use the 'let' command;
   - click on another tabpage (or create an empty one);
   - click back on the first tabpage.
<
NOTE Clicking out and in again is necessary for the colorscheme to get to know
about the existence and contents of the tabpage-local variable. Let me know
if you know some technically feasible way of avoiding this clicking!

Changing no-distraction mode numeric option on the same tab~
If, on a tabpage, you used option 1 and want to change to option 0 (or the
reverse):
>
   - in the same tabpage do a 'let' command to change the variable value;
   - click on another tabpage (or create an empty one);
   - click back on the first tabpage.
<

Leaving no-distraction mode on a tab and staying there in common mode~
If, after a session of no-distraction mode, you want to shift to the common
editing mode (ie, the non-distractionless mode) in the same tabpage, you should
follow this procedure:
>
   - delete the variable: issue an UNLET command upon it;
   - click on another tabpage (or create an empty one);
   - click back on the first tabpage.
<
NOTE 1: The mere existence of the above variable implies that the
		no-distraction mode is in effect in the tabpage. That explains
		why we need to `unlet` it.

NOTE 2: It is more practical to close! the tabpage and work with
		another. Remember that Vim allows you to have the same buffer
		open in more than one place!

EXAMPLE OF DISTRACTIONLESS EDITING~

The below sequence of command-line instructions show how to try a simple
example of distractionless editing.

(1) Open a new tab page, set the proper global variable and reload the
    colorscheme:
>
         :tabnew
         :let t:briofita_nodistractionmode=0
         :colorscheme briofita
<

(2) Edit a few lines for a test.

(3) When done, and BEFORE proceeding to common, non-distractionless editing:

     - either (in the same tab) DELETE the global variable:
>
         :unlet! t:briofita_nodistractionmode
<
     - or CLOSE the tabpage (this will bring you to another tab, or to the
	   remaining tab):
>
         :tabclose!
<
     - or OPEN a new tabpage (this will put you in the new tab):
>
		 :tabnew!
<
(4) If you stayed on the same tab (the first alternative above), reload the
    colorscheme with this command:
>
         :colorscheme briofita
<
                                                                  |briofita-TOC|

==============================================================================
Modeline: {{{1
vim:ts=4:tw=78:ft=help:norl:fdm=marker:
